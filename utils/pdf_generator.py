"""
PDF Generator for Cause List Data

This module provides utilities to generate PDF files from scraped cause list data.
"""

import os
import logging
from datetime import datetime
from typing import Dict, List, Any

logger = logging.getLogger(__name__)

def create_cause_list_pdf_from_data(scraped_data: Dict[str, Any], file_path: str) -> Dict[str, Any]:
    """
    Create a PDF file from scraped cause list data.
    
    Args:
        scraped_data: Dictionary containing scraped cause list data
        file_path: Path where to save the PDF file
        
    Returns:
        Dictionary with creation result
    """
    try:
        # Try to use ReportLab for professional PDF generation
        try:
            from reportlab.lib.pagesizes import letter, A4
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
            from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
            from reportlab.lib.units import inch
            from reportlab.lib import colors
            
            return _create_professional_pdf(scraped_data, file_path)
            
        except ImportError:
            logger.warning("ReportLab not available, creating text-based PDF")
            return _create_text_pdf(scraped_data, file_path)
            
    except Exception as e:
        logger.error(f"Error creating PDF: {str(e)}")
        return {
            'success': False,
            'error': str(e)
        }

def _create_professional_pdf(scraped_data: Dict[str, Any], file_path: str) -> Dict[str, Any]:
    """Create professional PDF using ReportLab."""
    try:
        from reportlab.lib.pagesizes import letter, A4
        from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.lib.units import inch
        from reportlab.lib import colors
        
        # Create document
        doc = SimpleDocTemplate(file_path, pagesize=A4)
        story = []
        
        # Get styles
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=16,
            spaceAfter=30,
            alignment=1  # Center alignment
        )
        
        # Title
        title = Paragraph("CAUSE LIST", title_style)
        story.append(title)
        story.append(Spacer(1, 12))
        
        # Court information
        court_info = [
            f"<b>Court:</b> {scraped_data.get('court_name', 'N/A')}",
            f"<b>Date:</b> {scraped_data.get('date', 'N/A')}",
            f"<b>Judge:</b> {scraped_data.get('judge', 'N/A')}",
            f"<b>Total Cases:</b> {scraped_data.get('total_cases', 0)}"
        ]
        
        for info in court_info:
            para = Paragraph(info, styles['Normal'])
            story.append(para)
            story.append(Spacer(1, 6))
        
        story.append(Spacer(1, 20))
        
        # Cases table
        cases = scraped_data.get('cases', [])
        if cases:
            # Table headers
            table_data = [['S.No.', 'Case Number', 'Parties', 'Advocate', 'Stage']]
            
            # Add case data
            for i, case in enumerate(cases, 1):
                table_data.append([
                    str(i),
                    case.get('case_number', ''),
                    case.get('parties', ''),
                    case.get('advocate', ''),
                    case.get('stage', '')
                ])
            
            # Create table
            table = Table(table_data, colWidths=[0.5*inch, 1.5*inch, 2.5*inch, 1.5*inch, 1.5*inch])
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 8),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ]))
            
            story.append(table)
        else:
            no_cases = Paragraph("No cases listed for this date.", styles['Normal'])
            story.append(no_cases)
        
        # Footer
        story.append(Spacer(1, 30))
        footer_text = f"Generated by eCourts Scraper on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        footer = Paragraph(footer_text, styles['Normal'])
        story.append(footer)
        
        # Build PDF
        doc.build(story)
        
        # Get file size
        file_size = os.path.getsize(file_path)
        
        logger.info(f"Created professional PDF: {file_path} ({file_size} bytes)")
        
        return {
            'success': True,
            'size': f"{file_size // 1024} KB",
            'sizeBytes': file_size
        }
        
    except Exception as e:
        logger.error(f"Error creating professional PDF: {str(e)}")
        return _create_text_pdf(scraped_data, file_path)

def _create_text_pdf(scraped_data: Dict[str, Any], file_path: str) -> Dict[str, Any]:
    """Create text-based PDF as fallback."""
    try:
        content = f"""CAUSE LIST

Court: {scraped_data.get('court_name', 'N/A')}
Date: {scraped_data.get('date', 'N/A')}
Judge: {scraped_data.get('judge', 'N/A')}
Total Cases: {scraped_data.get('total_cases', 0)}

CASES FOR HEARING
================

"""
        
        cases = scraped_data.get('cases', [])
        if cases:
            for i, case in enumerate(cases, 1):
                content += f"{i}. {case.get('case_number', 'N/A')}\n"
                content += f"   Parties: {case.get('parties', 'N/A')}\n"
                content += f"   Advocate: {case.get('advocate', 'N/A')}\n"
                content += f"   Stage: {case.get('stage', 'N/A')}\n\n"
        else:
            content += "No cases listed for this date.\n"
        
        content += f"\nGenerated by eCourts Scraper: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        
        # Write as text file with PDF extension
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        file_size = len(content.encode('utf-8'))
        
        logger.info(f"Created text-based PDF: {file_path} ({file_size} bytes)")
        
        return {
            'success': True,
            'size': f"{file_size // 1024} KB",
            'sizeBytes': file_size
        }
        
    except Exception as e:
        logger.error(f"Error creating text PDF: {str(e)}")
        return {
            'success': False,
            'error': str(e)
        }

def create_mock_cause_list_pdf(file_path: str, court_info: Dict[str, str]) -> Dict[str, Any]:
    """
    Create a mock cause list PDF for testing purposes.
    
    Args:
        file_path: Path where to save the PDF
        court_info: Dictionary with court information
        
    Returns:
        Dictionary with creation result
    """
    mock_data = {
        'court_name': court_info.get('court_name', 'Demo Court'),
        'date': court_info.get('date', datetime.now().strftime('%d-%m-%Y')),
        'judge': court_info.get('judge', 'Hon\'ble Demo Judge'),
        'total_cases': 5,
        'cases': [
            {
                'case_number': 'CRL.A. 123/2024',
                'parties': 'State vs. John Doe',
                'advocate': 'A.K. Sharma',
                'stage': 'Arguments'
            },
            {
                'case_number': 'CIV 456/2024',
                'parties': 'ABC Ltd vs. XYZ Corp',
                'advocate': 'R.P. Gupta',
                'stage': 'Evidence'
            },
            {
                'case_number': 'MAT 789/2024',
                'parties': 'Petitioner vs. State',
                'advocate': 'S.K. Singh',
                'stage': 'Final Hearing'
            },
            {
                'case_number': 'CRL 101/2024',
                'parties': 'State vs. Jane Smith',
                'advocate': 'M.L. Verma',
                'stage': 'Charge'
            },
            {
                'case_number': 'CIV 202/2024',
                'parties': 'Property Dispute Case',
                'advocate': 'N.K. Jain',
                'stage': 'Cross-examination'
            }
        ]
    }
    
    return create_cause_list_pdf_from_data(mock_data, file_path)